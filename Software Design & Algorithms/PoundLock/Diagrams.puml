@startuml Use Case Diagram
title Use Case Diagram

skinParam actorStyle awesome

:Operator: --> (Lower water level)
:Operator: --> (Raise water level)
:Operator: --> (Cause emergency stop)
:Operator: --> (Cease emergency)

@enduml

@startuml Class Diagram
title Class Diagram

Class ControlPanel
{
    {method} + SwitchToLow()
    {method} + SwitchToHigh()
    {method} + EmergencyStop()
    {method} + CeaseEmergency()
    {method} + AllowSailingIn()
}

Class Valve
{
    {method} + Open()
    {method} + Close()
    {method} + Stop()
}

Class Gate
{
    {method} + Open()
    {method} + Close()
    {method} + Stop()
    {method} - OpenValve(ValveID id)
    {method} - CloseValve(ValveID id)
}

Class TrafficLight
{
    {method} + Green()
    {method} + Red()
}

Class WaterLevelSensor
{
    {method} + Measure() : WaterLevel
}

class Motor
{
    {method} + Start()
    {method} + Stop()
}

enum WaterLevel
{
    High
    Above_High_Valve
    Above_Middle_Valve
    Above_Low_Water
    Low
}

enum ValveID
{
    High
    Middle
    Low
}

ControlPanel -> Gate : 1..2
Gate --> WaterLevelSensor : 1..1
WaterLevelSensor --> WaterLevel
Valve --> ValveID
Gate *-- TrafficLight : 1..2
Gate *-- Valve : 1..3
Gate *-- Motor : 1..1

@enduml

@startuml StateDiagram
title State Diagram
state Emergency

state NormalOperation {
    
'  Sequence Diagram Maken
'  Terug loopen naar Idle
'  Kijk naar volgorde deuren openen en sluiten


    [*] --> Idle
    Idle --> LowerWaterLevel : LowerWaterLevelIsPressed
    Idle --> RaiseWaterLevel : RaiseWaterLevelIsPressed
    RaiseWaterLevel --> Idle : GateIsOpen
    LowerWaterLevel --> Idle : GateIsOpen   

    state RaiseWaterLevel{
        R_CloseLowGate --> R_OpenLowValve
        R_OpenLowValve --> R_OpenLowValve : WaterLevel != Above_Middle_Valve
        R_OpenLowValve --> R_OpenMiddleValve : WaterLevel == Above_Middle_Valve
        R_OpenMiddleValve --> R_OpenMiddleValve : WaterLevel != Above_High_Valve
        R_OpenMiddleValve --> R_OpenHighValve : WaterLevel == Above_High_Valve
        R_OpenHighValve --> R_CloseAllValves : WaterLevel == High
        R_CloseAllValves --> R_OpenHighGate 
    }

    state LowerWaterLevel{
        L_CloseHighGate --> L_OpenLowValve
        L_OpenLowValve --> L_OpenLowValve : WaterLevel != Low
        L_OpenLowValve --> L_OpenLowGate : WaterLevel == Low
    }

    NormalOperation -> Emergency : EmergencyStopIsPressed
    Emergency -> NormalOperation : CeaseEmergencyIsPressed

    Idle --> AllowSailingIn : AllowSailingInIsPressed
    AllowSailingIn -> Idle : AllowSailingInIsPressed
}

@enduml

@startuml Sequence_Emergency
title Sequence Diagram Emergency

Actor Operator
Entity ControlPanel
Entity Gate
Entity Valve
Entity TrafficLight
Entity WaterLevelSensor
Entity Motor

Operator -> ControlPanel : EmergencyStop()	
ControlPanel -> Gate : EmergencyStop()
Gate -> Valve : EmergencyStop()
Valve -> Gate
Gate -> Motor : Stop()
Motor -> Gate
Gate -> ControlPanel
ControlPanel -> Operator : EmergencyLightOn()

@enduml

@startuml Sequence_Raise
title Sequence Diagram Raise Water Level

Actor Operator
Entity ControlPanel
Entity GateHigh
Entity GateLow
Entity ValveLow
Entity ValveMiddle
Entity ValveHigh
Entity TrafficLight
Entity WaterLevelSensor
Entity MotorLowGate
Entity MotorHighGate


Operator -> ControlPanel : RaiseWaterLevel()
ControlPanel -> GateLow : Close()
GateLow -> MotorLowGate : Close()
MotorLowGate -> GateLow
GateLow -> ValveLow : Open()
ValveLow -> GateLow

alt WaterLevel == Above_Middle_Valve
    GateLow -> ValveMiddle : Open()
    ValveMiddle -> GateLow
else WaterLevel == Above_High_Valve
    GateLow -> ValveHigh : Open()
    ValveHigh -> GateLow
else WaterLevel == High
    GateLow -> ValveLow : Close()
    ValveLow -> GateLow
    GateLow -> ValveMiddle : Close()
    ValveMiddle -> GateLow
    GateLow -> ValveHigh : Close()
    ValveHigh -> GateLow
    GateLow -> GateHigh : Open()
    GateHigh -> MotorHighGate : Open()
    MotorHighGate -> GateHigh
else WaterLevel isn't reached
    GateLow -> WaterLevelSensor : Measure()
    WaterLevelSensor -> GateLow : Result
end
GateHigh -> ControlPanel
ControlPanel -> Operator 
@enduml

@startuml Sequence_Lower
title Sequence Diagram Lower Water Level

Actor Operator
Entity ControlPanel
Entity GateHigh
Entity GateLow
Entity ValveLow
Entity ValveMiddle
Entity ValveHigh
Entity TrafficLight
Entity WaterLevelSensor
Entity MotorLowGate
Entity MotorHighGate

@enduml