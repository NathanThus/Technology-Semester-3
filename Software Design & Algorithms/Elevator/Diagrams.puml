@startuml Use Case
title Use Case Diagram

skinParam actorStyle awesome

:User: --> (Call Elevator)
:User: --> (Select Floor)
:User: --> (Keep door open via blocking)

@enduml

@startuml Class Diagram
Title Class Diagram

class ElevatorManager
{
}

class Elevator
{
    {method} + GetFloorNumber() : int
    {method} + MoveToFloor(int floor)
    {method} + Open()
}

class ElevatorShaft
{
    {method} + Raise()
    {method} + Lower()
}

class FloorSelectionPanel
{
    {method} + SelectFloor(int floor)
    {method} - RaiseFloorSelectionEvent()
}

class CallElevatorPanel
{
    {method} + CallElevator()
    {method} - RaiseCallElevatorEvent()
}

class Door
{
    {method} + Open()
    {method} + Close()
}

class Display
{
    {method} + UpdateFloor(int floor)
    {method} + UpdateDirection(ElevatorDirection direction)
    {method} + Refresh()
}

interface IDoorDisplay
{
    {method} + UpdateFloor(int floor)
    {method} + UpdateDirection(ElevatorDirection direction)
    {method} + Refresh()
}

class TensionManager
{
}

interface ITensionSensor
{
    {method} + Reset()
    {method} - RaiseTensionEvent()
}

interface IPressureSensor
{
    {method} - RaisePressureEvent()
}

interface IOpticalSensor
{
    {method} - RaiseOpticalEvent()
}

interface IButton
{
    {method} - RaiseButtonEvent()
}

class Button
{
}

interface IClamp
{
    {Method} + Close()
    {Method} + Open()
}

class Floor
{
    {field} - int FloorNumber
    {method} + Floor(int floorNumber)
    {method} + GetFloorNumber() : int
}

interface ISpeaker
{
    {Method} + PlaySound()
}

enum ElevatorDirection
{
    UP
    DOWN
    IDLE
}

ElevatorManager --> ElevatorShaft : 1..*
ElevatorManager --> Floor : 1..*

ElevatorShaft --> Elevator
ElevatorShaft --> TensionManager

Floor --> CallElevatorPanel
Floor --> IDoorDisplay

Elevator --> IDoorDisplay
Elevator --> ISpeaker
Speaker -up-|> ISpeaker
Elevator -----> FloorSelectionPanel

FloorSelectionPanel -> IButton
CallElevatorPanel --> IButton

IDoorDisplay --> Display
IDoorDisplay --> Door

Door --> IPressureSensor
Door --> IOpticalSensor
OpticalSensor -|> IOpticalSensor
PressureSensor -|> IPressureSensor

Button -up-|>  IButton

TensionManager --> IClamp
TensionManager --> ITensionSensor
TensionSensor -up-|> ITensionSensor
Clamp -up-|> IClamp

@enduml

@startuml Sequence_Emergency
title Sequence Diagram - Emergency


entity TensionManager
entity Clamp

loop
TensionManager -> TensionManager : CheckTension()
end
TensionManager -> Clamp : Close()


alt Tension is Reset
TensionManager -> Clamp : Open()
end

@enduml

@startuml Sequence_RequestElevator
title Sequence Diagram - Request Elevator

Actor User
entity Button
entity CallElevatorPanel
entity ElevatorShaft
entity ElevatorManager
entity Elevator
entity Display
entity Door

User -> Button : Press()
Button -> CallElevatorPanel : RaiseButtonEvent()
CallElevatorPanel -> ElevatorShaft : CallElevator()
ElevatorShaft -> ElevatorManager : RequestElevator()
ElevatorManager -> Elevator : MoveToFloor()

alt Elevator is moving
Elevator -> Display : UpdateFloor()
Display -> Elevator
Elevator -> Display : UpdateDirection()
Display -> Elevator
else
Elevator -> Display : UpdateFloor()
Display -> Elevator
Elevator -> Display : UpdateDirection()
Display -> Elevator
Elevator -> Door : Open()
Door -> Elevator
end
Elevator -> User

@enduml

@startuml Sequence_SelectFloor
title Sequence Diagram - Select Floor

Actor User
Entity Button
Entity FloorSelectionPanel
Entity Elevator
Entity Display
entity Door

User -> Button : Press()
Button -> FloorSelectionPanel : RaiseButtonEvent()
FloorSelectionPanel -> Elevator : SelectFloor()
Elevator -> Elevator : MoveToFloor()

loop Elevator is moving
Elevator -> Display : UpdateFloor()
Display -> Elevator
Elevator -> Display : UpdateDirection()
Display -> Elevator
end

Elevator -> Door : Open()
Door -> Elevator
Elevator -> User
@enduml

@startuml Sequence_KeepDoorOpen
title Sequence Diagram - Keep Door Open

actor User
entity Door
entity OpticalSensor
entity PressureSensor

note left of Door
    This is akin to sticking
    your foot in the door.
end note
loop PressureSensor is triggered
User -> PressureSensor : Block()
OpticalSensor -> Door : Open()
else OpticalSensor is triggered
User -> PressureSensor : Block()
OpticalSensor -> Door : Open()
else
Door -> Door : Close()
end

Door -> User


@enduml